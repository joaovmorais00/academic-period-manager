// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  email         String          @unique
  password      String
  isAdmin       Boolean         @default(false)
  Appointments  Appointment[]
  Subjects      Subject[]
  Tests         Test[]
  ExtraActivity ExtraActivity[]
}

model Appointment {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       User           @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  startDateTime   DateTime
  endDateTime     DateTime
  dayOfWeek       Int?
  notes           String?
  type            ActivityType   @default(CLASS)
  Subject         Subject?       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId       String?
  Test            Test?          @relation(fields: [testId], references: [id])
  testId          String?
  ExtraActivity   ExtraActivity? @relation(fields: [extraActivityId], references: [id])
  extraActivityId String?
  local           String?
}

model Subject {
  id                   String        @id @default(uuid())
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  createdBy            User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId      String
  title                String
  teacher              String?
  description          String?
  classesAndStudyTimes Appointment[]
  tests                Test[]
}

model Test {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  startDateTime   DateTime
  endDateTime     DateTime
  topic           String?
  notes           String?
  score           Int?
  worth           Int?
  link            String?
  type            TestType      @default(TEST)
  studyTimes      Appointment[]
  Subject         Subject?      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId       String?
  local           String?
}

model ExtraActivity {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  title           String
  notes           String?
  link            String?
  workSchedules   Appointment[]
}

enum ActivityType {
  CLASS
  STUDY_TIME
  EXTRA
}

enum TestType {
  TEST
  SEMINAR
  ARTICLE
  EXERCISE
  OTHER
}
