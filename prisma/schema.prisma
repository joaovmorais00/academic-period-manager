// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(uuid())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  name                    String
  email                   String                  @unique
  password                String
  isAdmin                 Boolean                 @default(false)
  Appointments            Appointment[]
  Subjects                Subject[]
  Tests                   Test[]
  AssessmentActivities    AssessmentActivity[]
  Meet                    Meet[]
  ComplementaryActivities ComplementaryActivity[]
}

model Appointment {
  id                      String                 @id @default(uuid())
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdBy               User                   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId         String
  name                    String?
  startDateTime           DateTime
  endDateTime             DateTime
  dayOfWeek               Int?
  notes                   String?
  type                    ActivityType           @default(CLASS)
  Subject                 Subject?               @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId               String?
  Test                    Test?                  @relation(fields: [testId], references: [id])
  testId                  String?
  AssessmentActivity      AssessmentActivity?    @relation(fields: [assessmentActivityId], references: [id], onDelete: Cascade)
  assessmentActivityId    String?
  ComplementaryActivity   ComplementaryActivity? @relation(fields: [complementaryActivityId], references: [id], onDelete: Cascade)
  complementaryActivityId String?
}

model Subject {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  createdBy            User                 @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId      String
  title                String
  teacher              String?
  description          String?
  classesAndStudyTimes Appointment[]
  tests                Test[]
  assessmentActivities AssessmentActivity[]
}

model Test {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  startDateTime   DateTime
  endDateTime     DateTime
  topic           String?
  notes           String?
  score           Int?
  worth           Int?
  studyTimes      Appointment[]
  Subject         Subject?      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId       String?
}

model AssessmentActivity {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  deadline        DateTime
  topic           String
  notes           String?
  link            String?
  score           String?
  worth           String?
  workSchedules   Appointment[]
  Meet            Meet[]
  Subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId       String
}

model ComplementaryActivity {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  type            String
  notes           String?
  link            String?
  workSchedules   Appointment[]
  Meet            Meet[]
}

model Meet {
  id                       String                 @id @default(uuid())
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  createdBy                User                   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId          String
  AssessmentActivity       AssessmentActivity?    @relation(fields: [assessment_ActivityId], references: [id], onDelete: Cascade)
  ComplementaryActivity    ComplementaryActivity? @relation(fields: [complementary_ActivityId], references: [id], onDelete: Cascade)
  complementary_ActivityId String?
  assessment_ActivityId    String?
  startDateTime            DateTime
  endDateTime              DateTime
  notes                    String?
}

enum ActivityType {
  CLASS
  STUDY_TIME
}
